#include <iostream>
#include <string>
using namespace std;

//继承中的构造和析构顺序

class Base {
public:
	Base() {
		cout << "Base构造函数！" << endl;
	}
	~Base() {
		cout << "Base析构函数！" << endl;
	}
public:
	int m_A;

protected:
	int m_B;

private:
	int m_C;
};

class Son:public Base {
public:
	Son() {
		cout << "Son构造函数！" << endl;
	}
	~Son() {
		cout << "Son析构函数！" << endl;
	}
public:
	int m_D;
};

void test01() {
	//继承中的构造和析构顺序如下：
	//先构造父类，再构造子类，析构的顺序与构造的顺序相反
	Son son;
}

int main() {
	test01();
}
